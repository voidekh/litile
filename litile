#!/bin/bash
#     __    _ _______ __
#    / /   (_)_  __(_) /__
#   / /   / / / / / / / _ \
#  / /___/ / / / / / /  __/
# /_____/_/ /_/ /_/_/\___/
#
# Copyright (C) 2022-present Wojciech M. Wnuk <laniusone@pm.me>
# Project: LiTile
# Repository: https://github.com/voidekh/litile
# License: GPLv3
#
# litile
# Main litile script
#
# USAGE:
#
# litile [-d=numberofdisplays] action
#
# Available actions:
# tile - Tiles current display with master-stack layout, currently focused window being master
# monocle - Maximizes currently focused window, and also raises it (so it covers tiled ones)
# move-left - Moves window to left display
# move-right - Move window to right display
# prev - Focus and move cursor to previous window on the same workspace
# next - Focus and move cursor to next window on the same workspace
# display-prev - Move cursor to previous display
# display-next - Move cursor to next display
# select-window - Tile to master-stack, select a window with your mouse, and maximize it (overview-like)
#
# Defining number of displays in CLI or in ~/.config/litilerc makes it work faster. Otherwise
# xrandr is called every time.
#
# Problems:
# - it assumes you have a top panel on every display

win=$(xprop -root _NET_ACTIVE_WINDOW | awk '{print $5}' | cut -d "," -f1)

workspace=$(wmctrl -d | grep "\*" | awk '{print $1}')
all_wins=$(wmctrl -l | grep "0x........  \?$workspace" | awk '{print $1}')

if [[ -z "$win" ]] || [[ ! "$all_wins" =~ $(echo "$win" | cut -d 'x' -f2) ]]; then
    notify-send "No focused window"
    exit
fi

workspace_w=$(wmctrl -d | grep "\*" | awk '{print $9}' | cut -d "x" -f 1)
workspace_h=$(wmctrl -d | grep "\*" | awk '{print $9}' | cut -d "x" -f 2)

for i in "$@"; do
    case $i in
        -d=*|--displays=*)
            displays="${i#*=}"
            shift
            ;;
        -*)
            echo "Unknown option $i"
            exit 1
            ;;
        *)
            action="$i"
            ;;
    esac
done

if [[ -f "$HOME"/.config/litilerc ]]; then
    source "$HOME"/.config/litilerc
fi

if [[ -z $displays ]]; then
    if [[ -n $DISPLAYS ]]; then
        displays=$DISPLAYS
    else
        displays=$(xrandr | grep -c " connected")
    fi
fi

top_bar=$(xprop -root _NET_WORKAREA | awk '{ print $4 }' | cut -d"," -f1)
display_w=$(("$workspace_w" / "$displays"))
display_h=$workspace_h

function get_window_dimensions {
    win_info=$(xwininfo -id "$1")
    titlebar_offset=$(xwininfo -id "$1" | awk '/Relative upper-left Y:/ { print $4 }')
    x=$(echo "$win_info" | grep "Absolute upper-left X:" | awk '{print $4}')
    y=$(echo "$win_info" | grep "Absolute upper-left Y:" | awk '{print $4}')
    w=$(echo "$win_info" | grep "Width:" | awk '{print $2}')
    h=$(echo "$win_info" | grep "Height:" | awk '{print $2}')
    echo -n "$x $((y - titlebar_offset)) $w $h $titlebar_offset"
}

function get_window_center {
    win_info=$(get_window_dimensions "$1")
    x=$(echo "$win_info" | awk '{print $3}')
    y=$(echo "$win_info" | awk '{print $4}')
    echo -n "$((x / 2)) $((y / 2))"
}

function unmaximize {
    wmctrl -i -r "$1" -b remove,maximized_vert,maximized_horz
}

function maximize {
    wmctrl -i -r "$1" -b add,maximized_vert,maximized_horz
}

function unminimize {
    xdotool windowactivate "$1"
}

function minimize {
    xdotool windowminimize "$1"
}

function focus {
    xdotool windowfocus "$1"
    xdotool windowraise "$1"
}

function move {
    wmctrl -i -r "$1" -e 0,"$2","$3","$4","$5"
}

function move-right {
    win_dimensions=$(get_window_dimensions "$win")
    new_x=$(($(echo "$win_dimensions" | awk '{print $1}') + display_w))
    new_x_offset=$(($(echo "$win_dimensions" | awk '{print $1+$3}') + display_w))
    y=$(echo "$win_dimensions" | awk '{print $2}')
    w=$(echo "$win_dimensions" | awk '{print $3}')
    h=$(echo "$win_dimensions" | awk '{print $4}')
    if [[ $new_x_offset -gt $workspace_w ]]; then
        new_x_offset=$workspace_w
        new_x=$((new_x_offset - w))
    fi
    if [[ $new_x_offset -le $workspace_w ]]; then
        unmaximize "$win"
        move "$win" "$new_x" "$y" "$w" "$h"
        focus "$win"
    fi
}

function move-left {
    win_dimensions=$(get_window_dimensions "$win")
    new_x=$(($(echo "$win_dimensions" | awk '{print $1}') - display_w))
    new_x_offset=$(($(echo "$win_dimensions" | awk '{print $1+$3}') - display_w))
    y=$(echo "$win_dimensions" | awk '{print $2}')
    w=$(echo "$win_dimensions" | awk '{print $3}')
    h=$(echo "$win_dimensions" | awk '{print $4}')
    if [[ $new_x -lt 0 ]]; then
        new_x=0
    fi
    if [[ $new_x -ge 0 ]]; then
        unmaximize "$win"
        move "$win" "$new_x" "$y" "$w" "$h"
        focus "$win"
    fi
}

function tile {
    win_dimensions=$(get_window_dimensions "$win")
    x=$(echo "$win_dimensions" | awk '{print $1}')
    current_display=$(((x / display_w))) # 0 = first
    display_start=$((display_w * current_display))
    display_middle=$((display_start + display_w / 2))
    display_end=$((display_start + display_w))
    wins_on_screen=""
    for i in $all_wins; do 
        win_dimensions=$(get_window_dimensions "$i")
        x=$(echo "$win_dimensions" | awk '{print $1}')
        w=$(echo "$win_dimensions" | awk '{print $3}')
        offset=$(echo "$win_dimensions" | awk '{print $5}')
        if [[ $x -ge $display_start && $x -lt $display_end && $i -ne $win ]]; then
            wins_on_screen+=" $i"
        fi
    done
    if [[ -z $wins_on_screen ]]; then
        maximize "$win"
    else
        unmaximize "$win"
        move "$win" $display_start "$top_bar" $((display_w/2)) $((display_h - offset))
        
        win_count=$(echo "$wins_on_screen" | wc -w)
        win_height=$((display_h/win_count))
        win_y=$top_bar
        win_first=1

        for i in $wins_on_screen; do 
            win_offset=$(xwininfo -id "$i" | awk '/Relative upper-left Y:/ { print $4 }')
            unmaximize "$i"
            unminimize "$i"
            move "$i" $display_middle "$win_y" $((display_w/2)) $((win_height - win_offset))
            win_y=$((win_y + win_height))
            [[ $win_first -eq 1 ]] && win_y=$((win_y + win_offset)) && win_first=0
        done
    fi
}

function monocle {
    win_dimensions=$(get_window_dimensions "$win")
    x=$(echo "$win_dimensions" | awk '{print $1}')
    current_display=$(((x / display_w))) # 0 = first
    display_start=$((display_w * current_display))
    display_middle=$((display_start + display_w / 2))
    display_end=$((display_start + display_w))
    for i in $all_wins; do 
        win_dimensions=$(get_window_dimensions "$i")
        x=$(echo "$win_dimensions" | awk '{print $1}')
        w=$(echo "$win_dimensions" | awk '{print $3}')
        offset=$(echo "$win_dimensions" | awk '{print $5}')
        if [[ $x -ge $display_start && $x -lt $display_end && $i -ne $win ]]; then
            minimize "$i"
        fi
    done
    maximize "$win"
    focus "$win"
}

function prev {
    prev=
    for i in $all_wins; do
        if [[ $i -ne $win ]]; then
            prev=$i
        elif [[ $i -eq $win ]] && [[ -n $prev ]]; then
            win_center=$(get_window_center "$prev")
            focus "$prev"
            xdotool mousemove -w "$prev" "$(cut -d ' ' -f1 <<< "$win_center")" "$(cut -d ' ' -f2 <<< "$win_center")"
            exit
        fi
    done
}

function next {
    prev=
    for i in $all_wins; do 
        if [[ $prev -eq $win ]] && [[ -n $prev ]]; then
            win_center=$(get_window_center "$i")
            focus "$i"
            xdotool mousemove -w "$i" "$(cut -d ' ' -f1 <<< "$win_center")" "$(cut -d ' ' -f2 <<< "$win_center")"
            exit
        else
            prev=$i
        fi 
    done
}

function display-prev {
    x=$(xdotool getmouselocation | awk '{print $1}' | cut -d ':' -f2)
    prev_display=$(((x / display_w) - 1))
    if [[ $prev_display -lt 0 ]]; then
        prev_display=0
    fi
    display_start=$((display_w * prev_display))
    display_middle=$((display_start + display_w / 2))
    xdotool mousemove "$display_middle" $((display_h / 2))
}

function display-next {
    x=$(xdotool getmouselocation | awk '{print $1}' | cut -d ':' -f2)
    next_display=$(((x / display_w) + 1))
    if [[ $next_display -gt $((displays - 1)) ]]; then
        next_display=$((displays - 1))
    fi
    display_start=$((display_w * next_display))
    display_middle=$((display_start + display_w / 2))
    xdotool mousemove "$display_middle" $((display_h / 2))
}

function select-window {
    tile
    win=$(xdotool selectwindow)
    monocle
}

case $action in
    move-right)
        move-right
        ;;
    move-left)
        move-left
        ;;
    tile)
        tile
        ;;
    monocle)
        monocle
        ;;
    select-window)
        select-window
        ;;
    prev)
        prev
        ;;
    next)
        next
        ;;
    display-prev)
        display-prev
        ;;
    display-next)
        display-next
        ;;
    *)
        printf "You need to specify an action.\n"
esac
