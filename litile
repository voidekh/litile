#!/bin/bash
#     __    _ _______ __
#    / /   (_)_  __(_) /__
#   / /   / / / / / / / _ \
#  / /___/ / / / / / /  __/
# /_____/_/ /_/ /_/_/\___/
#
# Copyright (C) 2022-present Wojciech M. Wnuk <laniusone@pm.me>
# Project: LiTile
# Repository: https://github.com/voidekh/litile
# License: GPLv3
#
# litile
# Main litile script
#
# USAGE:
#
# litile [-d=numberofdisplays] action
#
# Available actions:
# tile - Tiles current display with master-stack layout, currently focused window being master
# move-left - Moves window to left display
# move-right - Move window to right display
#
# Defining number of displays in CLI or in ~/.config/litilerc makes it work faster. Otherwise
# xrandr is called every time.
#
# Problems:
# - it assumes you have a top panel on every display
# - when tiling master window, top_bar value needs to be doubled for unknown reason

win=$(xprop -root _NET_ACTIVE_WINDOW | awk '{print $5}' | cut -d "," -f1)

workspace=$(wmctrl -d | grep "\*" | awk '{print $1}')
all_wins=$(wmctrl -l | grep "$workspace $HOSTNAME" | awk '{print $1}')

if [[ -z "$win" ]] || [[ ! "$all_wins" =~ $(echo "$win" | cut -d 'x' -f2) ]]; then
    notify-send "No focused window"
    exit
fi

workspace_w=$(wmctrl -d | grep "\*" | awk '{print $9}' | cut -d "x" -f 1)
workspace_h=$(wmctrl -d | grep "\*" | awk '{print $9}' | cut -d "x" -f 2)

for i in "$@"; do
    case $i in
        -d=*|--displays=*)
            displays="${i#*=}"
            shift
            ;;
        -*)
            echo "Unknown option $i"
            exit 1
            ;;
        *)
            action="$i"
            ;;
    esac
done

if [[ -f "$HOME"/.config/litilerc ]]; then
    source "$HOME"/.config/litilerc
fi

if [[ -z $displays ]]; then
    if [[ -n $DISPLAYS ]]; then
        displays=$DISPLAYS
    else
        echo 'here'
        displays=$(xrandr | grep -c " connected")
    fi
fi

top_bar=$(xprop -root _NET_WORKAREA | awk '{ print $4 }' | cut -d"," -f1)
titlebar_offset=$(xwininfo -id "$win" | awk '/Relative upper-left Y:/ { print $4 }')
display_w=$(("$workspace_w" / "$displays"))
display_h=$((workspace_h - titlebar_offset))

function get_window_dimensions {
    unset x y w h
    win_info=$(xwininfo -id "$1")
    x=$(echo "$win_info" | grep "Absolute upper-left X:" | awk '{print $4}')
    y=$(echo "$win_info" | grep "Absolute upper-left Y:" | awk '{print $4}')
    w=$(echo "$win_info" | grep "Width:" | awk '{print $2}')
    h=$(echo "$win_info" | grep "Height:" | awk '{print $2}')
    echo -n "$x $y $w $h"
}

case $action in
    move-right)
        win_dimensions=$(get_window_dimensions "$win")
        new_x=$(($(echo "$win_dimensions" | awk '{print $1}') + display_w))
        new_x_offset=$(($(echo "$win_dimensions" | awk '{print $1+$3}') + display_w))
        y=$(echo "$win_dimensions" | awk '{print $2}')
        w=$(echo "$win_dimensions" | awk '{print $3}')
        h=$(echo "$win_dimensions" | awk '{print $4}')
        if [[ $new_x_offset -gt $workspace_w ]]; then
            new_x_offset=$workspace_w
            new_x=$((new_x_offset - w))
        fi
        if [[ $new_x_offset -le $workspace_w ]]; then
            wmctrl -i -r "$win" -b remove,maximized_vert,maximized_horz
            wmctrl -i -r "$win" -e 0,"$new_x","$y","$w","$h"
        fi
        ;;
    move-left)
        win_dimensions=$(get_window_dimensions "$win")
        new_x=$(($(echo "$win_dimensions" | awk '{print $1}') - display_w))
        new_x_offset=$(($(echo "$win_dimensions" | awk '{print $1+$3}') - display_w))
        y=$(echo "$win_dimensions" | awk '{print $2}')
        w=$(echo "$win_dimensions" | awk '{print $3}')
        h=$(echo "$win_dimensions" | awk '{print $4}')
        if [[ $new_x -lt 0 ]]; then
            new_x=0
        fi
        if [[ $new_x -ge 0 ]]; then
            wmctrl -i -r "$win" -b remove,maximized_vert,maximized_horz
            wmctrl -i -r "$win" -e 0,"$new_x","$y","$w","$h"
        fi
        ;;
    tile)
        win_dimensions=$(get_window_dimensions "$win")
        x=$(echo "$win_dimensions" | awk '{print $1}')
        current_display=$(((x / display_w))) # 0 = first
        display_start=$((display_w * current_display))
        display_middle=$((display_start + display_w / 2))
        display_end=$((display_start + display_w))
        wins_on_screen=""
        for i in $all_wins; do 
            win_dimensions=$(get_window_dimensions "$i")
            x=$(echo "$win_dimensions" | awk '{print $1}')
            w=$(echo "$win_dimensions" | awk '{print $3}')
            if [[ $x -ge $display_start && $x -lt $display_end && $i -ne $win ]]; then
                wins_on_screen+=" $i"
            fi
        done
        if [[ -z $wins_on_screen ]]; then
            wmctrl -i -r "$win" -b add,maximized_vert,maximized_horz
        else
            wmctrl -i -r "$win" -b remove,maximized_vert,maximized_horz
            wmctrl -i -r "$win" -e 0,$display_start,$((top_bar * 2)),$((display_w/2)),$display_h
            
            win_count=$(echo "$wins_on_screen" | wc -w)
            win_height=$((display_h/win_count))
            win_y=$top_bar

            for i in $wins_on_screen; do 
                wmctrl -i -r "$i" -b remove,maximized_vert,maximized_horz
                wmctrl -i -r "$i" -e 0,$display_middle,"$win_y",$((display_w/2)),$win_height
                win_y=$((win_y + win_height))
            done
        fi
        ;;
    *)
        printf "You need to specify action.\n"
esac
